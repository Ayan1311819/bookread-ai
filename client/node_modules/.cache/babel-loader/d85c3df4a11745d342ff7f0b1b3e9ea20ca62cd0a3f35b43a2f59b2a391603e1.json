{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Hp\\\\OneDrive\\\\Desktop\\\\bookread-ai\\\\client\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react'; // React for building UI, useState for state management\nimport { Document, Page } from '@react-pdf/renderer'; // Render PDFs\nimport { EpubView } from 'epubjs-react'; // Render EPUBs\nimport axios from 'axios'; // For HTTP requests to backend\nimport './App.css'; // Custom styles\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [file, setFile] = useState(null); // State to hold the uploaded file\n  const [fileUrl, setFileUrl] = useState(null); // State to hold the URL of the uploaded file\n  const [highlightedText, setHighlightedText] = useState(''); // State for highlighted text\n  const [query, setQuery] = useState(''); // State for user query\n  const [aiResponse, setAiResponse] = useState(''); // State for AI response\n\n  // Handle file upload and send to backend\n  const handleFileUpload = async event => {\n    const formData = new FormData(); // Create form data object for file upload\n    formData.append('file', event.target.files[0]); // Append the selected file\n    try {\n      const response = await fetch('http://localhost:5000/api/upload', {\n        method: 'POST',\n        body: formData\n      });\n      const data = await response.json(); // Get file path from backend\n      setFileUrl(`http://localhost:5000${data.filePath}`); // Update state with file URL\n    } catch (error) {\n      console.error('Upload failed:', error); // Log errors\n    }\n  };\n\n  // Capture highlighted text on mouse up\n  const handleTextSelection = () => {\n    const selection = window.getSelection(); // Get selected text from the document\n    if (selection.toString()) {\n      setHighlightedText(selection.toString()); // Update state with selected text\n    }\n  };\n\n  // Handle query submission to Gemini API via backend\n  const handleQuerySubmit = async () => {\n    if (!highlightedText || !query) return; // Validate input\n    try {\n      const response = await axios.post('http://localhost:5000/api/query', {\n        text: highlightedText,\n        prompt: query\n      });\n      setAiResponse(response.data.response); // Update state with AI response\n    } catch (error) {\n      console.error('Query failed:', error); // Log errors\n      setAiResponse('Error fetching response');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"BookRead AI\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \".pdf,.epub\",\n      onChange: handleFileUpload // Trigger upload on file selection\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), fileUrl && /*#__PURE__*/_jsxDEV(\"div\", {\n      onMouseUp: handleTextSelection,\n      children: [\" \", fileUrl.endsWith('.pdf') ? /*#__PURE__*/_jsxDEV(Document, {\n        file: fileUrl,\n        children: [/*#__PURE__*/_jsxDEV(Page, {\n          pageNumber: 1\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 15\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(EpubView, {\n        url: fileUrl\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 13\n      }, this) /* Render EPUB content */]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Highlighted Text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: highlightedText || 'Select text to highlight'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: query,\n        onChange: e => setQuery(e.target.value) // Update query state\n        ,\n        placeholder: \"e.g., Explain this\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleQuerySubmit,\n        children: \"Ask AI\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"AI Response\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: aiResponse || 'No response yet'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"OuWjWn57A29t/moi5xoTt8zLyNw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Document","Page","EpubView","axios","jsxDEV","_jsxDEV","App","_s","file","setFile","fileUrl","setFileUrl","highlightedText","setHighlightedText","query","setQuery","aiResponse","setAiResponse","handleFileUpload","event","formData","FormData","append","target","files","response","fetch","method","body","data","json","filePath","error","console","handleTextSelection","selection","window","getSelection","toString","handleQuerySubmit","post","text","prompt","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","accept","onChange","onMouseUp","endsWith","pageNumber","url","value","e","placeholder","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Hp/OneDrive/Desktop/bookread-ai/client/src/App.js"],"sourcesContent":["import React, { useState } from 'react'; // React for building UI, useState for state management\nimport { Document, Page } from '@react-pdf/renderer'; // Render PDFs\nimport { EpubView } from 'epubjs-react'; // Render EPUBs\nimport axios from 'axios'; // For HTTP requests to backend\nimport './App.css'; // Custom styles\n\nfunction App() {\n  const [file, setFile] = useState(null); // State to hold the uploaded file\n  const [fileUrl, setFileUrl] = useState(null); // State to hold the URL of the uploaded file\n  const [highlightedText, setHighlightedText] = useState(''); // State for highlighted text\n  const [query, setQuery] = useState(''); // State for user query\n  const [aiResponse, setAiResponse] = useState(''); // State for AI response\n\n  // Handle file upload and send to backend\n  const handleFileUpload = async (event) => {\n    const formData = new FormData(); // Create form data object for file upload\n    formData.append('file', event.target.files[0]); // Append the selected file\n    try {\n      const response = await fetch('http://localhost:5000/api/upload', {\n        method: 'POST',\n        body: formData,\n      });\n      const data = await response.json(); // Get file path from backend\n      setFileUrl(`http://localhost:5000${data.filePath}`); // Update state with file URL\n    } catch (error) {\n      console.error('Upload failed:', error); // Log errors\n    }\n  };\n\n  // Capture highlighted text on mouse up\n  const handleTextSelection = () => {\n    const selection = window.getSelection(); // Get selected text from the document\n    if (selection.toString()) {\n      setHighlightedText(selection.toString()); // Update state with selected text\n    }\n  };\n\n  // Handle query submission to Gemini API via backend\n  const handleQuerySubmit = async () => {\n    if (!highlightedText || !query) return; // Validate input\n    try {\n      const response = await axios.post('http://localhost:5000/api/query', {\n        text: highlightedText,\n        prompt: query,\n      });\n      setAiResponse(response.data.response); // Update state with AI response\n    } catch (error) {\n      console.error('Query failed:', error); // Log errors\n      setAiResponse('Error fetching response');\n    }\n  };\n\n  return (\n    <div className=\"app\">\n      <h1>BookRead AI</h1> {/* App title */}\n      <input\n        type=\"file\"\n        accept=\".pdf,.epub\"\n        onChange={handleFileUpload} // Trigger upload on file selection\n      />\n      {fileUrl && (\n        <div onMouseUp={handleTextSelection}> {/* Capture highlights on mouse up */}\n          {fileUrl.endsWith('.pdf') ? (\n            <Document file={fileUrl}>\n              <Page pageNumber={1} /> {/* Render only the first page for now */}\n            </Document>\n          ) : (\n            <EpubView url={fileUrl} /> /* Render EPUB content */\n          )}\n        </div>\n      )}\n      <div className=\"sidebar\">\n        <h3>Highlighted Text</h3>\n        <p>{highlightedText || 'Select text to highlight'}</p> {/* Display highlighted text */}\n        <input\n          type=\"text\"\n          value={query}\n          onChange={(e) => setQuery(e.target.value)} // Update query state\n          placeholder=\"e.g., Explain this\"\n        />\n        <button onClick={handleQuerySubmit}>Ask AI</button> {/* Trigger query */}\n        <h3>AI Response</h3>\n        <p>{aiResponse || 'No response yet'}</p> {/* Display AI response */}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}